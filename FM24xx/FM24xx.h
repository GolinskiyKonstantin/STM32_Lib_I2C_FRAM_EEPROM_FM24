/*
	
  ******************************************************************************
  * @file 			( фаил ):   FM24xx.h
  * @brief 		( описание ):  	
  ******************************************************************************
  * @attention 	( внимание ):	author: Golinskiy Konstantin	e-mail: golinskiy.konstantin@gmail.com
  ******************************************************************************
  
*/


/*
	Ferroelectric Nonvolatile RAM
	
	FM24xx память равна хх килобит данных ( тоесть хх / 8 получаем килобайта )
	
	Модели бывают следущие:
	
	( частота шины I2C 1 MHz maximum bus frequency -----------------------

	A0 A1 A2 - данными ножками задаем адрес микросхемы 
				7-bit device address code - 1010  (A2)  (A1)  (A0). (A0 A1 A2  последние три бита )
				( если все три ножки притянуть к земле то получим 1010000 адрес (0x50 << 1) = 0xA0 )
				( для некоторой памяти A0 другой функционал )
				
	Vcc = от 2.7V до 3.6V
	
	SCL SDA  не забываем притянуть резисторами на 4.7 кОм к Питанию
	
	пин WP ( write protect ) - служит для блокировки записи
	( читать можно в любом случае )
	Когда вход защиты от записи подключен к Vcc, верхний квадрант памяти (1800-1FFFH) 
	защищен от операций записи. Для нормальной работы записи контакт защиты от записи 
	должен быть заземлен. Когда этот вывод остается неподключенным, 
	WP интерпретируется как ноль.
	Однако в таком случае возможна емкостная наводка помех на WP, поэтому Microchip 
	всегда рекомендует подключать этот вход к известному уровню. При использовании 
	для этой цели внешних верхних подтягивающих резисторов (pull-up) 
	их номинал должен быть 10 кОм или меньше.
	
*/


#ifndef _FM24XX_H
#define _FM24XX_H

#ifdef __cplusplus
extern "C" {
#endif

/* Includes ----------------------------------------------------------*/

#include "main.h"
#include "string.h"

//########################  SETUP  ######################################################
		
		// указываем порт I2C -------------------------------------------------------------------
		#define FM24XX_I2C 			hi2c1
		//---------------------------------------------------------------------------------------
		
		// Указываем адрес шины I2C -------------------------------------------------------------
		// A0 A1 A2 - данными ножками задаем адрес микросхемы 
		//		7-bit device address code - 1010  (A2)  (A1)  (A0). (A0 A1 A2  последние три бита )
		//		( если все три ножки притянуть к земле то получим 1010000 адрес (0x50 << 1) = 0xA0 )
		#define FM24XX_I2C_ADDR		(0x50 << 1)    //A0 A1 A2 connect GND ( для некоторой памяти A0 другой функционал )
		//---------------------------------------------------------------------------------------
		
		// указываем тип памяти ( нужное разкоментировать )
		//#define FM24_1_KBITS				// -> 1K bit 		(Organized as 128 x 8 bits) 	Ferroelectric Nonvolatile RAM	
		//#define FM24_2_KBITS				// -> 2K bit 		(Organized as 256 x 8 bits) 	Ferroelectric Nonvolatile RAM
		//#define FM24_4_KBITS				// -> 4K bit 		(Organized as 512 x 8 bits) 	Ferroelectric Nonvolatile RAM
		//#define FM24_8_KBITS				// -> 8K bit 		(Organized as 1024 x 8 bits) 	Ferroelectric Nonvolatile RAM
		//#define FM24_16_KBITS				// -> 16K bit 	(Organized as 2048 x 8 bits) 	Ferroelectric Nonvolatile RAM
		//#define FM24_32_KBITS				// -> 32K bit 	(Organized as 4096 x 8 bits) 	Ferroelectric Nonvolatile RAM
		#define FM24_64_KBITS				// -> 64K bit 	(Organized as 8192 x 8 bits) 	Ferroelectric Nonvolatile RAM
		//#define FM24_128_KBITS			// -> 128K bit 	(Organized as 16384 x 8 bits) Ferroelectric Nonvolatile RAM
		//#define FM24_256_KBITS			// -> 256K bit 	(Organized as 32768 x 8 bits) Ferroelectric Nonvolatile RAM
		//#define FM24_512_KBITS			// -> 512K bit 	(Organized as 65536 x 8 bits) Ferroelectric Nonvolatile RAM
		
		// если память больше чем 512K bit то там по документации нужно отправлять
		// в адресе FM24XX_I2C_ADDR вместо A0 0 или 1 выбирая часть памяти (типа страницы) ( легко можно добавить этот функционал )
		// а адресация остается 2 бита максимум 65536
		
		//---------------------------------------------------------------------------------------
		
		//--  Cесли используем порт WP для блокировки памяти тогда раскомментировать ------------
		// если на порту VCC то память заблоктрована для записи, если GND то разблокирована ( можно записывать )
		// читать можно в любом случае		
		//#define WP_PORT
		
		//----------------------------------------------------------------------------------------
		#ifdef WP_PORT
			#if defined (WP_GPIO_Port)
			#else
				#define WP_GPIO_Port    GPIOA
				#define WP_Pin			GPIO_PIN_14
			#endif
		#endif
		//---------------------------------------------------------------------------------------
		
		
//#######################################################################################


#ifdef FM24XX_I2C
	extern I2C_HandleTypeDef FM24XX_I2C;
#endif

// тип памяти
#if defined(FM24_1_KBITS)
    #define FM24XX_MAX_MEM_ADDRESS         128
#elif defined(FM24_2_KBITS)
    #define FM24XX_MAX_MEM_ADDRESS         256
#elif defined(FM24_4_KBITS)
    #define FM24XX_MAX_MEM_ADDRESS         512
#elif defined(FM24_8_KBITS)
    #define FM24XX_MAX_MEM_ADDRESS         1024
#elif defined(FM24_16_KBITS)
    #define FM24XX_MAX_MEM_ADDRESS         2048
#elif defined(FM24_32_KBITS)
    #define FM24XX_MAX_MEM_ADDRESS         4096
#elif defined(FM24_64_KBITS)
    #define FM24XX_MAX_MEM_ADDRESS         8192
#elif defined(FM24_128_KBITS)
    #define FM24XX_MAX_MEM_ADDRESS         16384
#elif defined(FM24_256_KBITS)
    #define FM24XX_MAX_MEM_ADDRESS         32768
#elif defined(FM24_512_KBITS)
    #define FM24XX_MAX_MEM_ADDRESS         65536
#endif


/* Functions prototypes ----------------------------------------------*/


/*
	******************************************************************************
	* @brief	 ( описание ):  Отчиска всего чипа ( 0xFF )
	* @param	( параметры ):	
	* @return  ( возвращает ):	

	******************************************************************************
*/
void FM24xx_erase_chip( void );
//----------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  Функция для записи в память массив данных ( uint8_t )
	* @param	( параметры ):	1- адрес в памяти значение от 0 до FM24XX_MAX_MEM_ADDRESS
								2- сам массив с данными
								3- размер массива ( или части )в байтах, сколько хотим записать байт 
	* @return  ( возвращает ):	вернет 0 если запись не произошла ( передали адрес и размер массива больше чем память чипа )
								вернет ( если запись удалась ) адресс на котором зокончили запись, удобно для последуещей записи с конца.

	******************************************************************************
*/
uint16_t FM24xx_write( uint16_t addMem_write, uint8_t *data_write, uint16_t size_write);
//------------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  Функция для чтения из памяти в массив данных ( uint8_t )
	* @param	( параметры ):	1- адрес в памяти значение от 0 до FM24XX_MAX_MEM_ADDRESS
								2- сам массив для данных
								3- размер массива ( или части )в байтах, сколько хотим считать байт 
	* @return  ( возвращает ):	вернет 0 если чтение не произошло ( передали адрес и размер массива больше чем память чипа )
								вернет ( если чтение удалось ) адресс на котором зокончили чтение, удобно для последуещего чтения с конца.

	******************************************************************************
*/
uint16_t FM24xx_read( uint16_t addMem_read, uint8_t *data_read, uint16_t size_read);
//------------------------------------------------------------------------------------



#ifdef __cplusplus
}
#endif

#endif	/*	_FM24XX_H */

/************************ (C) COPYRIGHT GKP *****END OF FILE****/
